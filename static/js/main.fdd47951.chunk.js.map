{"version":3,"sources":["Event.js","logo.svg","App.js","EventList.js","CitySearch.js","NumberOfEvents.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["Event","state","toggleDetails","hideDetails","setState","event","this","props","className","summary","description","start","dateTime","location","onClick","Component","App","events","locations","numberofevents","currentLocation","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mPAmCeA,GCnCA,I,kNDGbC,MAAQ,CACNC,eAAe,G,EAGjBC,YAAc,WACR,EAAKF,MAAMC,cAMb,EAAKE,SAAS,CACZF,eAAe,IANjB,EAAKE,SAAS,CACZF,eAAe,K,uDAUX,IAAD,OACCG,EAAUC,KAAKC,MAAfF,MACR,OAAO,sBAAKG,UAAU,QAAf,UACL,mBAAGA,UAAU,UAAb,SAAwBH,EAAMI,UAC9B,mBAAGD,UAAU,cAAb,SAA4BH,EAAMK,cAClC,mBAAGF,UAAU,aAAb,SAA2BH,EAAMM,MAAMC,WACvC,mBAAGJ,UAAU,WAAb,SAAyBH,EAAMQ,WAC/B,wBAAQL,UAAU,eAAeM,QAAS,kBAAM,EAAKX,eAArD,iC,GAzBcY,cEqELC,GCpESD,YCDCA,YCAIA,Y,6OHS3Bd,MAAQ,CACNgB,OAAQ,GACRC,UAAW,GACXC,eAAgB,GAChBC,gBAAiB,O,uDA6CjB,OACE,qBAAKZ,UAAU,MAAf,SACE,6C,GApDUO,cIEHM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCKMQ,QACW,cAA7BC,OAAOlB,SAASmB,UAEe,UAA7BD,OAAOlB,SAASmB,UAEhBD,OAAOlB,SAASmB,SAASC,MACvB,2DCXNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,YCvH5B1B,M","file":"static/js/main.fdd47951.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Event extends Component {\n  state = {\n    toggleDetails: false,\n  }\n\n  hideDetails = () => {\n    if(!this.state.toggleDetails) {\n      this.setState({\n        toggleDetails: true,\n      })\n    }\n    else {\n      this.setState({\n        toggleDetails: false,\n      })\n    }\n  }\n\n  render() {\n    const { event } = this.props;\n    return <div className=\"event\">\n      <p className=\"summary\">{event.summary}</p>\n      <p className=\"description\">{event.description}</p>\n      <p className=\"start-time\">{event.start.dateTime}</p>\n      <p className=\"location\">{event.location}</p>\n      <button className=\"hide-details\" onClick={() => this.hideDetails()}>\n      Hide Details\n      </button>\n\n\n    </div>;\n  }\n}\nexport default Event;","export default __webpack_public_path__ + \"static/media/logo.2b18f44b.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport EventList from './EventList';\nimport CitySearch from './CitySearch';\nimport NumberOfEvents from './NumberOfEvents';\nimport { extractLocations, getEvents } from './api';\nimport \"./nprogress.css\";\n\n\nclass App extends Component {\n  state = {\n    events: [],\n    locations: [],\n    numberofevents: 32,\n    currentLocation: 'all'\n  }\n\n  // updateEvents = (location, eventCount) => {\n  //   const { currentLocation, numberofevents } = this.state;\n  //   if(location) {\n  //     getEvents().then((events) => {\n  //       const locationEvents = (location === 'all') ?\n  //       events :\n  //       events.filter((event) => event.location === location);\n  //       const filteredEvents = locationEvents.slice(0, numberofevents);\n  //       this.setState({\n  //         events: filteredEvents,\n  //         currentLocation: location,\n  //       });\n  //     });\n  //   }\n  //   else {\n  //     getEvents().then((events) => {\n  //       const locationEvents = (location === 'all') ?\n  //       events :\n  //       events.filter((event) => event.location === currentLocation);\n  //       const filteredEvents = locationEvents.slice(0, eventCount);\n  //       this.setState({\n  //         events: filteredEvents,\n  //         numberofevents: eventCount,\n  //       });\n  //     });      \n  //   }\n  // };\n\n  // componentDidMount() {\n  //   this.mounted = true;\n  //   getEvents().then((events) => {\n  //     if (this.mounted) {\n  //       this.setState({ events, locations: extractLocations(events) });\n  //     } \n  //   });\n  // }\n\n  // componentWillUnmount() {\n  //   this.mounted = false;\n  // }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <p> Hello</p>\n        {/* <CitySearch locations={this.state.locations} updateEvents={this.updateEvents} />\n        <EventList events={this.state.events} />\n        <NumberOfEvents numberofevents={this.state.numberofevents} updateEvents={this.updateEvents} /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport Event from './Event'; \n\nclass EventList extends Component {\n  render() {\n    const { events } = this.props;\n    return (\n    <ul className=\"EventList\">\n      {events.map(event =>\n        <li key={event.id}>\n          <Event event={event} />\n        </li>\n      )}\n    </ul>\n    );\n  }\n}\n\nexport default EventList;","import React, { Component } from 'react';\n\nclass CitySearch extends Component {\n\n  state = {\n    query: '',\n    suggestions: [],\n    showSuggestions: false\n  }\n\n  handleInputChanged = (event) => {\n    const value = event.target.value;\n    const suggestions = this.props.locations.filter((location) => {\n      return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\n    })\n    this.setState({\n      query: value,\n      suggestions,\n    });\n  }\n\n  handleItemClicked = (suggestion) => {\n    this.setState({\n      query: suggestion,\n      showSuggestions: false\n    });\n\n    this.props.updateEvents(suggestion);\n  }\n\n  render() {\n    return (\n      <div className=\"CitySearch\">\n        <input type=\"text\" className=\"city\" value={this.state.query} onChange={this.handleInputChanged} onFocus={() => { this.setState({ showSuggestions: true }) }} />\n\n        <ul className=\"suggestions\" style={this.state.showSuggestions ? {}: { display: 'none' }}>\n          {this.state.suggestions.map((suggestion) => (\n              <li key={suggestion} onClick={() => this.handleItemClicked(suggestion)}>{suggestion}</li>\n            ))}\n          <li onClick={() => this.handleItemClicked('all')}  key='all'>\n            <b>See all cities</b>\n          </li>\n          \n        </ul>\n\n      </div>\n    );\n  }\n}\n\nexport default CitySearch;","import React, { Component } from \"react\";\n\nclass NumberOfEvents extends Component {\n\n  state = {\n    numberofevents: 32,\n  }\n\n  changeEventNumber = (event) => {\n    this.setState({\n      numberofevents: event.target.value\n    });\n    this.props.updateEvents(null, event.target.value);\n  };\n\n  render() {\n    return (\n      <div className=\"no-of-events\">\n        <input type=\"text\" className=\"numberOfEvents\"\n        value={this.state.numberofevents}\n        onChange={this.changeEventNumber}\n        ></input>\n      </div>\n    )\n  }\n\n}\n\nexport default NumberOfEvents;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.unregister();\nreportWebVitals();\n"],"sourceRoot":""}