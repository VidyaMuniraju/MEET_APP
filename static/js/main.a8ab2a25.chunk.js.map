{"version":3,"sources":["logo.svg","EventList.js","CitySearch.js","NumberOfEvents.js","App.js","reportWebVitals.js","index.js"],"names":["EventList","events","this","props","className","map","event","id","Component","CitySearch","state","query","suggestions","showSuggestions","handleInputChanged","value","target","locations","filter","location","toUpperCase","indexOf","setState","handleItemClicked","suggestion","updateEvents","type","onChange","onFocus","style","display","onClick","NumberOfEvents","numberofevents","changeEventNumber","App","currentLocation","eventCount","getEvents","then","filteredEvents","slice","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a8ab2a25.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { Component } from 'react';\nimport Event from './Event'; \n\nclass EventList extends Component {\n  render() {\n    const { events } = this.props;\n    return (\n    <ul className=\"EventList\">\n      {events.map(event =>\n        <li key={event.id}>\n          <Event event={event} />\n        </li>\n      )}\n    </ul>\n    );\n  }\n}\n\nexport default EventList;","import React, { Component } from 'react';\n\nclass CitySearch extends Component {\n\n  state = {\n    query: '',\n    suggestions: [],\n    showSuggestions: false\n  }\n\n  handleInputChanged = (event) => {\n    const value = event.target.value;\n    const suggestions = this.props.locations.filter((location) => {\n      return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\n    })\n    this.setState({\n      query: value,\n      suggestions,\n    });\n  }\n\n  handleItemClicked = (suggestion) => {\n    this.setState({\n      query: suggestion,\n      showSuggestions: false\n    });\n\n    this.props.updateEvents(suggestion);\n  }\n\n  render() {\n    return (\n      <div className=\"CitySearch\">\n        <input type=\"text\" className=\"city\" value={this.state.query} onChange={this.handleInputChanged} onFocus={() => { this.setState({ showSuggestions: true }) }} />\n\n        <ul className=\"suggestions\" style={this.state.showSuggestions ? {}: { display: 'none' }}>\n          {this.state.suggestions.map((suggestion) => (\n              <li key={suggestion} onClick={() => this.handleItemClicked(suggestion)}>{suggestion}</li>\n            ))}\n          <li onClick={() => this.handleItemClicked('all')}  key='all'>\n            <b>See all cities</b>\n          </li>\n          \n        </ul>\n\n      </div>\n    );\n  }\n}\n\nexport default CitySearch;","import React, { Component } from \"react\";\n\nclass NumberOfEvents extends Component {\n\n  state = {\n    numberofevents: 32,\n  }\n\n  changeEventNumber = (event) => {\n    this.setState({\n      numberofevents: event.target.value\n    });\n    this.props.updateEvents(null, event.target.value);\n  };\n\n  render() {\n    return (\n      <div className=\"no-of-events\">\n        <input type=\"text\" className=\"numberOfEvents\"\n        value={this.state.numberofevents}\n        onChange={this.changeEventNumber}\n        ></input>\n      </div>\n    )\n  }\n\n}\n\nexport default NumberOfEvents;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport EventList from './EventList';\nimport CitySearch from './CitySearch';\nimport NumberOfEvents from './NumberOfEvents';\nimport { extractLocations, getEvents } from './api';\nimport \"./nprogress.css\";\n\n\nclass App extends Component {\n  state = {\n    events: [],\n    locations: [],\n    numberofevents: 32,\n    currentLocation: 'all'\n  }\n\n  updateEvents = (location, eventCount) => {\n    const { currentLocation, numberofevents } = this.state;\n    if(location) {\n      getEvents().then((events) => {\n        const locationEvents = (location === 'all') ?\n        events :\n        events.filter((event) => event.location === location);\n        const filteredEvents = locationEvents.slice(0, numberofevents);\n        this.setState({\n          events: filteredEvents,\n          currentLocation: location,\n        });\n      });\n    }\n    else {\n      getEvents().then((events) => {\n        const locationEvents = (location === 'all') ?\n        events :\n        events.filter((event) => event.location === currentLocation);\n        const filteredEvents = locationEvents.slice(0, eventCount);\n        this.setState({\n          events: filteredEvents,\n          numberofevents: eventCount,\n        });\n      });      \n    }\n  };\n\n  // componentDidMount() {\n  //   this.mounted = true;\n  //   getEvents().then((events) => {\n  //     if (this.mounted) {\n  //       this.setState({ events, locations: extractLocations(events) });\n  //     } \n  //   });\n  // }\n\n  // componentWillUnmount() {\n  //   this.mounted = false;\n  // }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <CitySearch locations={this.state.locations} updateEvents={this.updateEvents} />\n        <EventList events={this.state.events} />\n        <NumberOfEvents numberofevents={this.state.numberofevents} updateEvents={this.updateEvents} />\n      </div>\n  );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}